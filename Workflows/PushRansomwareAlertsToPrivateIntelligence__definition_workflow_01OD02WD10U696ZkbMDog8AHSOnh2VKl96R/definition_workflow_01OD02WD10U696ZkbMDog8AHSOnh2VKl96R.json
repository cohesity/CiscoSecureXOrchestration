{
  "workflow": {
    "unique_name": "definition_workflow_01OD02WD10U696ZkbMDog8AHSOnh2VKl96R",
    "name": "Push Helios Ransomware Alerts to Private Intelligence",
    "title": "Push Helios Ransomware Alerts to Private Intelligence",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": null,
    "properties": {
      "atomic": {
        "is_atomic": false
      },
      "delete_workflow_instance": false,
      "description": "Push Cohesity Helios ransomware alerts dectected in the last n hours to Threat Response private intelligence data store",
      "display_name": "Push Helios Ransomware Alerts to Private Intelligence",
      "runtime_user": {
        "override_target_runtime_user": false,
        "specify_on_workflow_start": false,
        "target_default": true
      },
      "target": {
        "execute_on_target_group": false,
        "execute_on_workflow_target": false,
        "no_target": true,
        "specify_on_workflow_start": false
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01OD06NW1F62A31ciAhEkiQe1aXMdUgEn3q",
        "name": "Execute Python Script",
        "title": "Push ransomware alerts to private intelligence",
        "type": "python3.script",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": false,
          "description": "Python script to push ranware alerts from Helios to private intelligence at regular\nintervals",
          "display_name": "Push ransomware alerts to private intelligence",
          "script": "'''\nSecureX orchestration workflow python script used to get anomalous objects detected\nin the last n hours from Cohesity Helios and push to SecureX private intelligence\nScript usage:\npython push_ransonware_data.py \u003cclient_id\u003e \u003cclient_password\u003e \u003chelios_api_key\u003e \u003cn\u003e\nclient_id: Threat Response API client id\nclient_password: Threat Response API client password\nhelios_api_key: Cohesity Helios API key\nn: number of hours, used to get anomalous objects detected in the last n hours\n'''\n\nimport argparse\nimport datetime\nimport requests\nimport sys\nimport time\n\n\ndef get_access_token(args):\n    '''\n    Get Threat Response access token\n    :param args:\n    :return:\n    '''\n    try:\n        url = \"https://visibility.amp.cisco.com/iroh/oauth2/token\"\n        headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Accept\": \"application/json\"\n        }\n        response = requests.post(url, headers=headers, auth=(args.client_id, args.client_password),\n                                 verify=False, data={'grant_type': 'client_credentials'})\n        if response.status_code != 200:\n            raise Exception(str(response.json()))\n        return response.json()['access_token']\n    except Exception as e:\n        raise Exception(\"Failed to get threat response access token, \" + str(e))\n\n\ndef get_property_dict(property_list):\n    '''\n    get property dictionary from list of property dicts\n    with keys, values\n    :param property_list:\n    :return:\n    '''\n    property_dict = {}\n    for property in property_list:\n        property_dict[property['key']] = property['value']\n    return property_dict\n\n\ndef get_sightings_from_external_id(external_id, tr_access_token):\n    try:\n        url = 'https://private.intel.amp.cisco.com/ctia/sighting/external_id/' + external_id\n        headers = {\n            'Authorization': 'Bearer ' + tr_access_token,\n            'Content-Type': 'application/json'\n        }\n        response = requests.get(url, headers=headers, verify=False)\n        if response.status_code != 200:\n            raise Exception('Failed to get sightings from external id, ' + str(response.json()))\n        return response.json()\n    except Exception as e:\n        raise Exception(str(e))\n\n\ndef create_sightings(tr_access_token, ransomware_alerts):\n    try:\n        headers = {\n            'Authorization': 'Bearer ' + tr_access_token,\n            'Content-Type': 'application/json'\n        }\n        for alert in ransomware_alerts:\n            property_dict = get_property_dict(alert['propertyList'])\n            external_id = property_dict.get('object', '') + '___' +\\\n                          property_dict.get('entityId', '') + '___' +\\\n                          property_dict.get('source', '') + '___' +\\\n                          property_dict.get('cluster', '') + '___' +\\\n                          property_dict.get('cid', '')\n            sightings = get_sightings_from_external_id(external_id, tr_access_token)\n            if sightings:\n                sighting = sightings[0]\n                url = 'https://private.intel.amp.cisco.com/ctia/sighting/' + sighting['id'].split('/')[-1]\n                sighting['resolution'] = ''\n                sighting['observed_time']['start_time'] = datetime.datetime.utcfromtimestamp(\n                        float(alert['firstTimestampUsecs']) / 1000000).isoformat()\n\n                sighting['observed_time']['end_time'] = datetime.datetime.utcfromtimestamp(\n                        float(alert['latestTimestampUsecs']) / 1000000).isoformat()\n                response = requests.put(url, headers=headers,\n                                         verify=False, json=sighting)\n                if response.status_code != 200:\n                    raise Exception('Failed to update the sighting, ' + str(response.json()))\n            else:\n                url = 'https://private.intel.amp.cisco.com/ctia/sighting'\n                sighting = {\n                    \"description\": \"Anomalous object from Cohesity\"\n                                   \" Helios. The object is under source \\'\" +\n                                   property_dict.get(\"source\", \"\") +\n                                   \"\\' on cluster \\'\" + property_dict.get(\"cluster\", \"\") + \"\\'\",\n                    \"observables\": [\n                        {\n                            \"type\": \"hostname\",\n                            \"value\": property_dict.get(\"object\", \"\")\n                        }\n                    ],\n                    \"source\": \"Cohesity Helios\",\n                    \"severity\": \"High\",\n                    \"confidence\": \"High\",\n                    \"internal\": True,\n                    \"observed_time\": {\n                        \"start_time\": datetime.datetime.utcfromtimestamp(\n                            float(alert['firstTimestampUsecs']) / 1000000).isoformat(),\n                        \"end_time\": datetime.datetime.utcfromtimestamp(\n                            float(alert['latestTimestampUsecs']) / 1000000).isoformat()\n                    },\n                    \"external_ids\": [external_id],\n                    \"external_references\": [\n                        {\n                            \"source_name\": property_dict.get('source', ''),\n                            \"description\": \"The source in which the anomalous object is present\"\n                        }\n\n                    ]\n                }\n\n                response = requests.post(url, headers=headers,\n                                         verify=False, json=sighting)\n                if response.status_code != 201:\n                    raise Exception('Failed to create sighting, ' + str(response.json()))\n    except Exception as e:\n        raise Exception(str(e))\n\n\ndef get_ransomware_alerts(args):\n    '''\n    get ransomware alerts from Cohesity Helios\n    :param args:\n    :return:\n    '''\n    try:\n        ransomware_alerts = []\n        url = 'https://helios.cohesity.com/mcm/alerts?' \\\n              'alertCategoryList=kSecurity\u0026alertStateList=kOpen'\n        params = {\n            \"maxAlerts\": 1000,\n            \"alertCategoryList\": \"kSecurity\",\n            \"alertStateList\": \"kOpen\",\n            \"_includeTenantInfo\": True,\n            \"startDateUsecs\": int((time.time() - int(args.n) * 60 * 60) * 1000000)\n        }\n        headers = {'Content-Type': 'application/json',\n                   'apiKey': args.helios_api_key}\n        response = requests.get(url, headers=headers, params=params, verify=False)\n        if response.status_code != 200:\n            raise Exception(str(response.json()))\n        for alert in response.json():\n            if alert['severity'] == 'kCritical' and alert['alertState'] == 'kOpen' and \\\n                    alert['alertCode'] == 'CE01516011':\n                ransomware_alerts.append(alert)\n        return ransomware_alerts\n    except Exception as e:\n        raise Exception(\"Failed to get ransomware alerts from Helios, \" + str(e))\n\n\ndef main(args):\n    try:\n        tr_access_token = get_access_token(args)\n        ransomware_alerts = get_ransomware_alerts(args)\n        create_sightings(tr_access_token, ransomware_alerts)\n        print(\"Workflow succeeded\")\n    except Exception as e:\n        sys.exit(str(e))\n\n\nparser = argparse.ArgumentParser(\n    description=\"Arguments to get anomalous objects from Helios\"\n                \" and push to private intelligence\")\nparser.add_argument(\"client_id\", help=\"Threat Response API client id\")\nparser.add_argument(\"client_password\", help=\"Threat Response API client password\")\nparser.add_argument(\"helios_api_key\", help=\"Cohesity Helios API key\")\nparser.add_argument(\"n\", help=\"Number of hours, filter anomalous objects detected\"\n                              \" in the last n hours\")\nargs = parser.parse_args()\nmain(args)",
          "script_arguments": [
            "$global.variable_01OD0BGYECLGD1ckdF368ZacwRYFH5G0DP9.global.variable_01OD0BGYECLGD1ckdF368ZacwRYFH5G0DP9$",
            "$global.variable_01OD0BYGSPB4U6PaIKM5IHOsB1E17QdNFLW.global.variable_01OD0BYGSPB4U6PaIKM5IHOsB1E17QdNFLW$",
            "$global.variable_01NUXTVON1RN738uyknMjBaKMXOjdk9up4r.global.variable_01NUXTVON1RN738uyknMjBaKMXOjdk9up4r$",
            "$global.variable_01OD0GHYPQ8JJ3cQio7pfjoqIUwrasIA2jr.global.variable_01OD0GHYPQ8JJ3cQio7pfjoqIUwrasIA2jr$"
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  },
  "triggers": {
    "triggerschedule_01OD0V835Z9NH5jpqvPC4At51zz3jLij1Tq": {
      "workflow_id": "definition_workflow_01OD02WD10U696ZkbMDog8AHSOnh2VKl96R",
      "name": "Helios Ransomware Push Trigger",
      "title": "",
      "lowercase_name": "schedule.helios_ransomware_push_trigger",
      "description": "The push workflow is triggered based on the schedule to sync anomalous object data on Helios and Threat Response private intelligence data store",
      "type": "schedule",
      "base_type": "trigger",
      "ref_id": "schedule_01OD0U5F998SU05n5KmkBk6cfVG8udoEcnw",
      "version": "",
      "disabled": false,
      "unique_name": "triggerschedule_01OD0V835Z9NH5jpqvPC4At51zz3jLij1Tq",
      "object_type": "triggerschedule"
    }
  },
  "schedules": {
    "schedule_01OD0U5F998SU05n5KmkBk6cfVG8udoEcnw": {
      "unique_name": "schedule_01OD0U5F998SU05n5KmkBk6cfVG8udoEcnw",
      "name": "Cohesity Helios Ransomware Data Push Schedule",
      "description": "Schedule to trigger orchestration workflow to push Helios ransomware data to private intelligence",
      "type": "basic.schedule",
      "base_type": "schedule",
      "properties": {
        "calendar": "calendar_recurring_1BMfMWvgiDhSjBQ7hTSyvz3NyVZ",
        "timezone": "Etc/GMT+0",
        "starttime": "00:00",
        "interval_hours": 12,
        "interval_minutes": 0,
        "number_of_times": 2,
        "display_name": "Cohesity Helios Ransomware Data Push Schedule",
        "description": "Schedule to trigger orchestration workflow to push Helios ransomware data to private intelligence"
      },
      "version": "1.0.0",
      "object_type": "schedule"
    }
  },
  "variables": {
    "variable_01NUXTVON1RN738uyknMjBaKMXOjdk9up4r": {
      "unique_name": "variable_01NUXTVON1RN738uyknMjBaKMXOjdk9up4r",
      "properties": {
        "value": "*****",
        "scope": "global",
        "name": "Cohesity Helios API Key",
        "type": "datatype.secure_string",
        "description": "Cohesity Helios API key used for authentication while making API calls",
        "is_required": false,
        "is_invisible": false
      },
      "object_type": "variable"
    },
    "variable_01OD0BGYECLGD1ckdF368ZacwRYFH5G0DP9": {
      "unique_name": "variable_01OD0BGYECLGD1ckdF368ZacwRYFH5G0DP9",
      "properties": {
        "value": "*****",
        "scope": "global",
        "name": "Threat Response API Client Id",
        "type": "datatype.secure_string",
        "description": "Theat response API Client Id used for authentication while making API calls",
        "is_required": false,
        "is_invisible": false
      },
      "object_type": "variable"
    },
    "variable_01OD0BYGSPB4U6PaIKM5IHOsB1E17QdNFLW": {
      "unique_name": "variable_01OD0BYGSPB4U6PaIKM5IHOsB1E17QdNFLW",
      "properties": {
        "value": "*****",
        "scope": "global",
        "name": "Threat Response API Client Password",
        "type": "datatype.secure_string",
        "description": "Theat response API Client password used for authentication while making API calls",
        "is_required": false,
        "is_invisible": false
      },
      "object_type": "variable"
    },
    "variable_01OD0GHYPQ8JJ3cQio7pfjoqIUwrasIA2jr": {
      "unique_name": "variable_01OD0GHYPQ8JJ3cQio7pfjoqIUwrasIA2jr",
      "properties": {
        "value": "12",
        "scope": "global",
        "name": "Cohesity Helios Ransomware Alerts Filter",
        "type": "datatype.string",
        "description": "Specifies the number of hours. This is used to filter alerts detected in the last specified number of hours",
        "is_required": false,
        "is_invisible": false
      },
      "object_type": "variable"
    }
  }
}