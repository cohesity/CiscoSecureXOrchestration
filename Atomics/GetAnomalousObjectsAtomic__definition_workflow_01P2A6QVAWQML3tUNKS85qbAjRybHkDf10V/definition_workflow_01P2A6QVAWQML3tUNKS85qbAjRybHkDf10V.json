{
  "workflow": {
    "unique_name": "definition_workflow_01P2A6QVAWQML3tUNKS85qbAjRybHkDf10V",
    "name": "Cohesity Helios - Get Anomalous Objects",
    "title": "Cohesity Helios - Get Anomalous Objects",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "0",
          "scope": "input",
          "name": "Start Time",
          "type": "datatype.string",
          "description": "Epoch time in microseconds. This is used to filter all anomalous objects detected after this timestamp",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P2B2S0MTEDI3apIFsAW9Siwb3c1fpfdV2",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "0",
          "scope": "input",
          "name": "End Time",
          "type": "datatype.string",
          "description": "Epoch time in microseconds. This is used to filter all anomalous objects detected before this timestamp",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P2B3HR6DAU70qmcA7Cs7UFPiLNTz5pZvB",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "Cohesity Helios API Key",
          "type": "datatype.secure_string",
          "description": "Cohesity Helios API key used to make API calls to Helios",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P2AHDUHRRX103GrTwWrvd4zzZ5GPEUL09",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "output",
          "name": "Anomalous Objects Json",
          "type": "datatype.string",
          "description": "List of Anomalous objects data in json format",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P2ASXFC130D4JuZqAI4ZVl9M2RuCkIP8w",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "atomic_group": "Cohesity Helios",
        "is_atomic": true
      },
      "delete_workflow_instance": false,
      "description": "Gets anomalous objects from Cohesity Helios",
      "display_name": "Cohesity Helios - Get Anomalous Objects",
      "runtime_user": {
        "target_default": true
      },
      "target": {
        "no_target": true
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01P2A9GILNS8W0bO0vieqjRmUG359ka5glz",
        "name": "Execute Python Script",
        "title": "Get anomalous objects",
        "type": "python3.script",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": false,
          "description": "Python script to get anomalous objects from Cohesity Helios",
          "display_name": "Get anomalous objects",
          "script": "'''\nPython script used to get Anomalous objects detected on Helios\nScript usage:\npython ignore_object_anomaly_alert.py \u003chelios_api_key\u003e \u003cstart_time\u003e \u003cend_time\u003e\n'''\nimport argparse\nimport json\nimport requests\nimport sys\ndef get_ransomware_alerts(args):\n    '''\n    get ransomware alerts from Cohesity Helios\n    :param args:\n    :return:\n    '''\n    try:\n        ransomware_alerts = []\n        url = 'https://helios.cohesity.com/mcm/alerts?' \\\n              'alertCategoryList=kSecurity\u0026alertStateList=kOpen'\n        params = {\n            \"maxAlerts\": 1000,\n            \"_includeTenantInfo\": True\n        }\n        if args.start_time != '0' and args.end_time != '0':\n            params[\"startDateUsecs\"] = int(args.start_time)\n            params[\"endDateUsecs\"] = int(args.end_time)\n        elif args.start_time != '0' and args.end_time == '0':\n            params[\"startDateUsecs\"] = int(args.start_time)\n        elif args.start_time == '0' and args.end_time != '0':\n            params[\"endDateUsecs\"] = int(args.end_time)\n        headers = {'Content-Type': 'application/json',\n                   'apiKey': args.helios_api_key}\n        response = requests.get(url, headers=headers, params=params, verify=False)\n        if response.status_code != 200:\n            raise Exception(str(response.json()))\n        for alert in response.json():\n            if alert['severity'] == 'kCritical' and alert['alertState'] == 'kOpen' and \\\n                    alert['alertCode'] == 'CE01516011':\n                ransomware_alerts.append(alert)\n        return ransomware_alerts\n    except Exception as e:\n        raise Exception(\"Failed to get ransomware alerts from Helios, \" + str(e))\ndef main(args):\n    try:\n        ransomware_alerts = get_ransomware_alerts(args)\n        print(json.dumps(ransomware_alerts))\n    except Exception as e:\n        sys.exit(str(e))\nparser = argparse.ArgumentParser(\n    description=\"Arguments to get anomalous objects from Helios\")\nparser.add_argument(\"helios_api_key\", help=\"Cohesity Helios API key\")\nparser.add_argument(\"start_time\", help=\"Epoch time in microseconds.\"\n                                       \" This is used to filter all\"\n                                       \" anomalous objects detected \"\n                                       \"after this timestamp\")\nparser.add_argument(\"end_time\", help=\"Epoch time in microseconds.\"\n                                     \" This is used to filter all\"\n                                     \" anomalous objects detected\"\n                                     \" before this timestamp\")\nargs = parser.parse_args()\nmain(args)",
          "script_arguments": [
            "$workflow.definition_workflow_01P2A6QVAWQML3tUNKS85qbAjRybHkDf10V.input.variable_workflow_01P2AHDUHRRX103GrTwWrvd4zzZ5GPEUL09$",
            "$workflow.definition_workflow_01P2A6QVAWQML3tUNKS85qbAjRybHkDf10V.input.variable_workflow_01P2B2S0MTEDI3apIFsAW9Siwb3c1fpfdV2$",
            "$workflow.definition_workflow_01P2A6QVAWQML3tUNKS85qbAjRybHkDf10V.input.variable_workflow_01P2B3HR6DAU70qmcA7Cs7UFPiLNTz5pZvB$"
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_01P2C0UMJEC8C2M6a4zr76A4uF129HnWL4V",
        "name": "Set Variables",
        "title": "Set output variable",
        "type": "core.set_multiple_variables",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "description": "Set json response to output variable",
          "display_name": "Set output variable",
          "skip_execution": false,
          "variables_to_update": [
            {
              "variable_to_update": "$workflow.definition_workflow_01P2A6QVAWQML3tUNKS85qbAjRybHkDf10V.output.variable_workflow_01P2ASXFC130D4JuZqAI4ZVl9M2RuCkIP8w$",
              "variable_value_new": "$activity.definition_activity_01P2A9GILNS8W0bO0vieqjRmUG359ka5glz.output.response_body$"
            }
          ]
        },
        "object_type": "definition_activity"
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  }
}