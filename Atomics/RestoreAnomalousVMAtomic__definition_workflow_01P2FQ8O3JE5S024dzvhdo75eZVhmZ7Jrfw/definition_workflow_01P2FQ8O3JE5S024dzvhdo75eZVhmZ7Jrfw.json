{
  "workflow": {
    "unique_name": "definition_workflow_01P2FQ8O3JE5S024dzvhdo75eZVhmZ7Jrfw",
    "name": "Cohesity Helios - Restore Anomalous VM",
    "title": "Cohesity Helios - Restore Anomalous VM",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "Object",
          "type": "datatype.string",
          "description": "Name of the anomalous vm",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P2FT44WXFJJ2nmc5DhQdOfSxlnONlkKWC",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.secure_string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "Cohesity Helios API Key",
          "type": "datatype.secure_string",
          "description": "Cohesity Helios API key used to make API calls to Helios",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P2GO75XA2796FiZf5Oprnp8yBuTmbkn2Z",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "output",
          "name": "Restored Object",
          "type": "datatype.string",
          "description": "Name of the restored vm",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P2GELDEKDFK7O52XhtUcCvSYAB0Wg1FfG",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "atomic_group": "Cohesity Helios",
        "is_atomic": true
      },
      "delete_workflow_instance": false,
      "description": "Restore Anomalous VM to latest clean snapshot. \nCurrently only VMware VM's are supported",
      "display_name": "Cohesity Helios - Restore Anomalous VM",
      "runtime_user": {
        "target_default": true
      },
      "target": {
        "no_target": true
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01P2FT8YEV5K74lcYdoHpmmZuP1IGxBX3FB",
        "name": "Execute Python Script",
        "title": "Restore VM ",
        "type": "python3.script",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": false,
          "description": "Python script to restore vm to the latest clean snapshot. Currently only VMware vm's are supported",
          "display_name": "Restore VM ",
          "script": "'''\npython script used to restore an anomalous object on Helios\nto the latest clean snapshot.\nSupported environments: VMware\nScript usage:\npython restore_to_latest_clean_snapshot.py \u003chelios_api_key\u003e \u003cobject\u003e\nhelios_api_key: Cohesity Helios API key\nobject: Anomalous object name\n'''\nimport argparse\nimport requests\nimport sys\nimport time\ndef get_property_dict(property_list):\n    '''\n    get property dictionary from list of property dicts\n    with keys, values\n    :param property_list:\n    :return:\n    '''\n    property_dict = {}\n    for property in property_list:\n        property_dict[property['key']] = property['value']\n    return property_dict\ndef resolve_alert(alert_id, args):\n    '''\n    resolve ransomware alert on helios\n    :param alert_id:\n    :param args:\n    :return:\n    '''\n    try:\n        headers = {'Content-Type': 'application/json', 'apiKey': args.helios_api_key}\n        request_payload = {\n            \"status\": \"kResolved\"\n        }\n        url = 'https://helios.cohesity.com/mcm/alerts/' + alert_id\n        response = requests.patch(url, headers=headers, json=request_payload, verify=False)\n        if response.status_code != 200:\n            raise Exception(\"Successful in restoring the anomalous object\"\n                            \" but failed to resolve the alert on Helios\")\n    except Exception as e:\n        raise Exception(str(e))\ndef restore_vmware_object(restore_properties, args):\n    '''\n    restore anomalous object to the latest clean snapshot\n    :param restore_properties:\n    :param args:\n    :return:\n    '''\n    try:\n        headers = {'Content-Type': 'application/json', 'apiKey': args.helios_api_key}\n        vm_name_details = {\"prefix\": \"Recover-\", \"suffix\": \"-VM-\" + str(int(time.time()))}\n        request_payload = {\n            \"objects\": [{\"entity\": {\"id\": int(restore_properties[\"entityId\"]),\n                                    \"parentId\": int(restore_properties[\"parentId\"])},\n                         \"jobId\": int(restore_properties[\"jobId\"]),\n                         \"jobInstanceId\": int(restore_properties[\"jobInstanceId\"]),\n                         \"jobUid\": {\n                             \"clusterId\": int(restore_properties['cid']),\n                             \"clusterIncarnationId\": int(restore_properties['clusterIncarnationId']),\n                             \"objectId\": int(restore_properties['jobId'])\n                         },\n                         \"startTimeUsecs\": int(restore_properties[\"jobStartTimeUsecs\"]),\n                         }],\n            \"name\": \"Cisco_SecureX_triggered_restore_task_\" + restore_properties[\"object\"],\n            \"powerStateConfig\": {\"powerOn\": True},\n            \"restoredObjectsNetworkConfig\": {\"disableNetwork\": False},\n            \"renameRestoredObjectParam\": {\"prefix\": vm_name_details['prefix'],\n                                          \"suffix\": vm_name_details['suffix']},\n            \"continueRestoreOnError\": False}\n        url = 'https://helios.cohesity.com/irisservices/api/v1/restore'\n        headers['clusterid'] = restore_properties['cid']\n        response = requests.post(url, headers=headers, json=request_payload, verify=False)\n        if response.status_code != 200:\n            raise Exception(\"Failed to restore \" + restore_properties['object'] +\n                            ' to latest clean snapshot. ' + str(response.json()))\n        print(vm_name_details['prefix'] + restore_properties['object'] + vm_name_details['suffix'])\n    except Exception as e:\n        raise Exception(str(e))\ndef get_restore_properties(args):\n    '''\n    Get the alert id and the properties needed for\n    restore operation\n    :param args:\n    :return:\n    '''\n    try:\n        alert_id = ''\n        url = 'https://helios.cohesity.com/mcm/alerts?alertCategoryList=kSecurity\u0026alertStateList=kOpen'\n        params = {\n            \"maxAlerts\": 1000,\n            \"alertCategoryList\": \"kSecurity\",\n            \"alertStateList\": \"kOpen\",\n            \"_includeTenantInfo\": True\n        }\n        headers = {'Content-Type': 'application/json', 'apiKey': args.helios_api_key}\n        # get security alerts\n        response = requests.get(url, headers=headers, params=params, verify=False)\n        if response.status_code != 200:\n            raise Exception(\"Failed to get security alerts from helios, \" + str(response.json()))\n        restore_properties = {}\n        for alert in response.json():\n            if alert['severity'] == 'kCritical' and alert['alertState'] == 'kOpen' and \\\n                    alert['alertCode'] == 'CE01516011':\n                property_dict = get_property_dict(alert['propertyList'])\n                if property_dict.get('object', \"\") == args.object:\n                    restore_properties = property_dict\n                    alert_id = alert['id']\n                    break\n        return restore_properties, alert_id\n    except Exception as e:\n        raise Exception(str(e))\ndef main(args):\n    '''\n    :param args: commandline arguments\n    :return:\n    '''\n    try:\n        restore_properties, alert_id = get_restore_properties(args)\n        if not restore_properties:\n            raise Exception(\"Failed to find the anomalous object on Helios\")\n        elif restore_properties.get('environment', \"\") != 'kVMware':\n            raise Exception(\"Workflow supports only VMware environment\")\n        # restore VMware anomalous object\n        elif restore_properties and restore_properties.get('environment') == 'kVMware':\n            restore_vmware_object(restore_properties, args)\n            resolve_alert(alert_id, args)\n        print(\"Workflow succeeded\")\n    except Exception as e:\n        sys.exit(\"Workflow failed: \" + str(e))\nparser = argparse.ArgumentParser(\n    description=\"Arguments to restore anomalous object to latest clean snapshot\")\nparser.add_argument(\"helios_api_key\", help=\"Cohesity Helios API key\")\nparser.add_argument(\"object\", help=\"Anomalous object name\")\nargs = parser.parse_args()\nmain(args)",
          "script_arguments": [
            "$workflow.definition_workflow_01P2FQ8O3JE5S024dzvhdo75eZVhmZ7Jrfw.input.variable_workflow_01P2GO75XA2796FiZf5Oprnp8yBuTmbkn2Z$",
            "$workflow.definition_workflow_01P2FQ8O3JE5S024dzvhdo75eZVhmZ7Jrfw.input.variable_workflow_01P2FT44WXFJJ2nmc5DhQdOfSxlnONlkKWC$"
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_01P2GF6SUMI7Y5KP0aICHcwzj1y8dCAobrD",
        "name": "Set Variables",
        "title": "Set output variable",
        "type": "core.set_multiple_variables",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "description": "Set output variable to restored object name",
          "display_name": "Set output variable",
          "skip_execution": false,
          "variables_to_update": [
            {
              "variable_to_update": "$workflow.definition_workflow_01P2FQ8O3JE5S024dzvhdo75eZVhmZ7Jrfw.output.variable_workflow_01P2GELDEKDFK7O52XhtUcCvSYAB0Wg1FfG$",
              "variable_value_new": "$activity.definition_activity_01P2FT8YEV5K74lcYdoHpmmZuP1IGxBX3FB.output.response_body$"
            }
          ]
        },
        "object_type": "definition_activity"
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  }
}