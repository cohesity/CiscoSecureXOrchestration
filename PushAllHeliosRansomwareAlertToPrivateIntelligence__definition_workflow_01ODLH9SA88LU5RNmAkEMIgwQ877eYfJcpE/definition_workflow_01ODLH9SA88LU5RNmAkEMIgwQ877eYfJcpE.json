{
  "workflow": {
    "unique_name": "definition_workflow_01ODLH9SA88LU5RNmAkEMIgwQ877eYfJcpE",
    "name": "Push All Helios Ransomware Alerts to Private Intelligence",
    "title": "Push All Helios Ransomware Alerts to Private Intelligence",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": null,
    "properties": {
      "atomic": {
        "is_atomic": false
      },
      "delete_workflow_instance": false,
      "description": "Push all helios ransomware alerts  to Threat Response private intelligence",
      "display_name": "Push All Helios Ransomware Alerts to Private Intelligence",
      "runtime_user": {
        "override_target_runtime_user": false,
        "specify_on_workflow_start": false,
        "target_default": true
      },
      "target": {
        "execute_on_target_group": false,
        "execute_on_workflow_target": false,
        "no_target": true,
        "specify_on_workflow_start": false
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01ODLIU5VO4WC5n9RnipHPSuBfbTcvpfxlt",
        "name": "Execute Python Script",
        "title": "Push all ransomware alerts to private intelligence",
        "type": "python3.script",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": false,
          "display_name": "Push all ransomware alerts to private intelligence",
          "script": "'''\nSecureX orchestration workflow python script used to get all anomalous objects data from\nCohesity Helios and push to SecureX private intelligence\nScript usage:\npython push_all_ransomware_data.py \u003cclient_id\u003e \u003cclient_password\u003e \u003chelios_api_key\u003e\nclient_id: Threat Response API client id\nclient_password: Threat Response API client password\nhelios_api_key: Cohesity Helios API key\n'''\n\nimport argparse\nimport datetime\nimport requests\nimport sys\n\n\ndef get_access_token(args):\n    '''\n    Get Threat Response access token\n    :param args:\n    :return:\n    '''\n    try:\n        url = \"https://visibility.amp.cisco.com/iroh/oauth2/token\"\n        headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Accept\": \"application/json\"\n        }\n        response = requests.post(url, headers=headers, auth=(args.client_id, args.client_password),\n                                 verify=False, data={'grant_type': 'client_credentials'})\n        if response.status_code != 200:\n            raise Exception(str(response.json()))\n        return response.json()['access_token']\n    except Exception as e:\n        raise Exception(\"Failed to get threat response access token, \" + str(e))\n\n\ndef get_property_dict(property_list):\n    '''\n    get property dictionary from list of property dicts\n    with keys, values\n    :param property_list:\n    :return:\n    '''\n    property_dict = {}\n    for property in property_list:\n        property_dict[property['key']] = property['value']\n    return property_dict\n\n\ndef alerts_to_sightings(ransomware_alerts):\n    '''\n    map helios alerts to sightings\n    :param ransomware_alerts:\n    :return:\n    '''\n    try:\n        sightings = []\n        for alert in ransomware_alerts:\n            property_dict = get_property_dict(alert['propertyList'])\n            sighting = {\n                \"description\": \"Anomalous object from Cohesity\"\n                               \" Helios. The object is under source \\'\" +\n                               property_dict.get(\"source\", \"\") +\n                               \"\\' on cluster \\'\" + property_dict.get(\"cluster\", \"\") + \"\\'\",\n                \"observables\": [\n                    {\n                        \"type\": \"hostname\",\n                        \"value\": property_dict.get(\"object\", \"\")\n                    }\n                ],\n                \"source\": \"Cohesity Helios\",\n                \"severity\": \"High\",\n                \"confidence\": \"High\",\n                \"internal\": True,\n                \"observed_time\": {\n                    \"start_time\": datetime.datetime.utcfromtimestamp(\n                        float(alert['firstTimestampUsecs'])/1000000).isoformat(),\n                    \"end_time\": datetime.datetime.utcfromtimestamp(\n                        float(alert['latestTimestampUsecs'])/1000000).isoformat()\n                }\n            }\n            sightings.append(sighting)\n        return sightings\n    except Exception as e:\n        raise Exception(\"Failed to map helios alerts to sightings, \" + str(e))\n\n\ndef create_sightings(tr_access_token, ransomware_alerts):\n    '''\n    create sightings Threat Response private intelligence\n    :param tr_access_token:\n    :param ransomware_alerts:\n    :param args:\n    :return:\n    '''\n    try:\n        sightings_list = alerts_to_sightings(ransomware_alerts)\n        url = 'https://private.intel.amp.cisco.com/ctia/sighting'\n        headers = {\n            'Authorization': 'Bearer ' + tr_access_token,\n            'Content-Type': 'application/json'\n        }\n        for sighting in sightings_list:\n            response = requests.post(url, headers=headers,\n                                     verify=False, json=sighting)\n            if response.status_code != 201:\n                raise Exception(str(response.json()))\n    except Exception as e:\n        raise Exception('Failed to create sightings, ' + str(e))\n\n\ndef get_ransomware_alerts(args):\n    '''\n    get ransomware alerts from Cohesity Helios\n    :param args:\n    :return:\n    '''\n    try:\n        ransomware_alerts = []\n        url = 'https://helios.cohesity.com/mcm/alerts?' \\\n              'alertCategoryList=kSecurity\u0026alertStateList=kOpen'\n        params = {\n            \"maxAlerts\": 1000,\n            \"alertCategoryList\": \"kSecurity\",\n            \"alertStateList\": \"kOpen\",\n            \"_includeTenantInfo\": True\n        }\n        headers = {'Content-Type': 'application/json',\n                   'apiKey': args.helios_api_key}\n        response = requests.get(url, headers=headers, params=params, verify=False)\n        if response.status_code != 200:\n            raise Exception(str(response.json()))\n        for alert in response.json():\n            if alert['severity'] == 'kCritical' and alert['alertState'] == 'kOpen' and \\\n                    alert['alertCode'] == 'CE01516011':\n                ransomware_alerts.append(alert)\n        return ransomware_alerts\n    except Exception as e:\n        raise Exception(\"Failed to get ransomware alerts from Helios, \" + str(e))\n\n\ndef main(args):\n    try:\n        tr_access_token = get_access_token(args)\n        ransomware_alerts = get_ransomware_alerts(args)\n        create_sightings(tr_access_token, ransomware_alerts)\n        print(\"Workflow succeeded\")\n    except Exception as e:\n        sys.exit(str(e))\n\n\nparser = argparse.ArgumentParser(\n    description=\"Arguments to get anomalous objects from Helios\"\n                \" and push to private intelligence\")\nparser.add_argument(\"client_id\", help=\"Threat Response API client id\")\nparser.add_argument(\"client_password\", help=\"Threat Response API client password\")\nparser.add_argument(\"helios_api_key\", help=\"Cohesity Helios API key\")\nargs = parser.parse_args()\nmain(args)",
          "script_arguments": [
            "$global.variable_01OD0BGYECLGD1ckdF368ZacwRYFH5G0DP9.global.variable_01OD0BGYECLGD1ckdF368ZacwRYFH5G0DP9$",
            "$global.variable_01OD0BYGSPB4U6PaIKM5IHOsB1E17QdNFLW.global.variable_01OD0BYGSPB4U6PaIKM5IHOsB1E17QdNFLW$",
            "$global.variable_01NUXTVON1RN738uyknMjBaKMXOjdk9up4r.global.variable_01NUXTVON1RN738uyknMjBaKMXOjdk9up4r$"
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  },
  "variables": {
    "variable_01NUXTVON1RN738uyknMjBaKMXOjdk9up4r": {
      "unique_name": "variable_01NUXTVON1RN738uyknMjBaKMXOjdk9up4r",
      "properties": {
        "value": "*****",
        "scope": "global",
        "name": "Helios API Key",
        "type": "datatype.secure_string",
        "is_required": false,
        "is_invisible": false
      },
      "object_type": "variable"
    },
    "variable_01OD0BGYECLGD1ckdF368ZacwRYFH5G0DP9": {
      "unique_name": "variable_01OD0BGYECLGD1ckdF368ZacwRYFH5G0DP9",
      "properties": {
        "value": "*****",
        "scope": "global",
        "name": "Threat Response API Client Id",
        "type": "datatype.secure_string",
        "is_required": false,
        "is_invisible": false
      },
      "object_type": "variable"
    },
    "variable_01OD0BYGSPB4U6PaIKM5IHOsB1E17QdNFLW": {
      "unique_name": "variable_01OD0BYGSPB4U6PaIKM5IHOsB1E17QdNFLW",
      "properties": {
        "value": "*****",
        "scope": "global",
        "name": "Threat Response API Client Password",
        "type": "datatype.secure_string",
        "is_required": false,
        "is_invisible": false
      },
      "object_type": "variable"
    }
  }
}